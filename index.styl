$baseRhythm = 20px
$baseCols = 12
$baseFontSize = 14px
$baseZ = 100
$baseZStep = 1
// BASE
G(arg = 1, cols = $baseCols)
  if ((arg != 0) && (!arg))
    return
  if typeof(arg) == 'string'
    if arg == '%'
      return convert(100%)
    if arg == '?'
      return convert(auto)
  if unit(arg) != ''
    return convert(arg)
  return convert((round(arg / cols * 10000) / 100) + 'vw')
R(arg = 1,  rhythm = $baseRhythm)
  if ((arg != 0) && (!arg))
    return null
  if typeof(arg) == 'string'
    if arg == '%'
      return percentage(1)
    return
  if (unit(arg) != '')
    return arg
  if (unit($baseRhythm) == 'px')
    return floor(arg * rhythm)
  else if (unit($baseRhythm) == 'vw') or (unit($baseRhythm) == 'vh')
    return round(arg * rhythm * 100) / 100
  else
    return arg * rhythm

// POSITIONS
_isO(_overflow)
  if typeof(_overflow) != 'string'
    return
  if _overflow == 'H' || _overflow == 'X' || _overflow == 'Y' || _overflow == 'V' || _overflow == 'S'
    return true
O(_overflow)
  if typeof(_overflow) != 'string'
   return
  if _overflow == 'H'
    overflow hidden
  else if _overflow == 'X'
    overflow-x hidden
  else if _overflow == 'Y'
    overflow-y hidden
  else if _overflow == 'V'
    overflow visible
  else if _overflow == 'S'
    overflow scroll
_pos(args...)
  if typeof(args[0]) == 'string'
    if args[0] == '%%'
      top 0
      left 0
      bottom 0
      right 0
    else if _isO(args[0])
      O args[0]
      args[0] = null
  else if args[0] == 0 || args[0]
    top R(args[0])
  if _isO(args[1])
    O args[1]
    args[1] = null
  if ((args[1] == 0) || (args[1]))
    right R(args[1])
  if _isO(args[1])
    O args[1]
    args[1] = null
  if _isO(args[2])
    O args[2]
    args[2] = null
  if ((args[2] == 0) || (args[2]))
    bottom R(args[2])
  if _isO(args[3])
    O args[3]
    args[3] = null
  if ((args[3] == 0) || (args[3]))
    left R(args[3])
  if _isO(args[4])
    O args[4]
ABS(args...)
  position absolute
  _pos(args[0], args[1], args[2], args[3], args[4])
FIX(args...)
  position fixed
  _pos(args[0], args[1], args[2], args[3], args[4])
REL(args...)
  position relative
  _pos(args[0], args[1], args[2], args[3], args[4])
STA(args...)
  position static
  _pos(args[0], args[1], args[2], args[3], args[4])
// DIMENSIONS
H(args...)
  if args[0] == 0 or args[0]
    height R(args[0])
  if args[1] == 0 or args[1]
    max-height R(args[1])
  if args[2] == 0 or args[2]
    min-height R(args[2])
W(args...)
  if args[0] == 0 or args[0]
    width R(args[0])
  if args[1] == 0 or args[1]
    max-width R(args[1])
  if args[2] == 0 or args[2]
    min-width R(args[2])
Z(args...)
  if args[0] == 0 || args[0]
    z-index round($baseZ + (args[0] * $baseZStep))
// ALIGNEMENT
_isALI(_ali)
  if (typeof(_ali) != 'string')
    return
  if _ali == 'S' || _ali == 'M' || _ali == 'E' || _ali == 'A' || _ali == 'J'
    return true
  return
ALI(args...)
  if typeof(args[0] == 'string')
    if args[0] == 'S'
      text-align left
    else if args[0] == 'M'
      text-align center
    else if args[0] == 'E'
      text-align right
    else if args[0] == 'J'
      text-align justify
  if typeof(args[1] == 'string')
    if args[1] == 'S'
      vertical-align start
    else if args[1] == 'M'
      vertical-align middle
    else if args[1] == 'E'
      vertical-align bottom
// DISPLAY
B(args...)
  display block
  if typeof(args[0]) == 'string'
    if args[0] == '%%'
      args[0] = '%'
      args[1] = '%'
      if args[1] == 0 || args[1]
        args[2] = args[1]
    else if _isALI(args[0])
      ALI args[0]
  if typeof(args[1]) == 'string'
    if args[1] == '@'
      args[1] = args[0]
  if typeof(args[1]) == 'string'
    if args[1] == '@'
      args[1] = args[0]
    else if _isALI(args[1])
      ALI args[1]
      args[1] = null
  if typeof(args[2]) == 'string'
    if _isALI(args[2])
      ALI args[2]
      args[2] = null
  if typeof(args[3]) == 'string'
    if _isALI(args[3])
      ALI args[3]
  W args[0]
  H args[1]
  Z args[2]
I(args...)
  display inline-block
  if typeof(args[0]) == 'string'
    if args[0] == '%%'
      args[0] = '%'
      if args[1] == 0 || args[1]
        args[2] = args[1]
      args[1] = '%'
    else if _isALI(args[0])
      ALI null args[0]
  if typeof(args[1]) == 'string'
    if args[1] == '@'
      args[1] = args[0]
    else if _isALI(args[1])
      ALI null args[1]
      args[1] = null
  if typeof(args[2]) == 'string'
    if _isALI(args[2])
      ALI null args[2]
      args[2] = null
  if typeof(args[3]) == 'string'
    if _isALI(args[3])
      ALI null args[3]
  W args[0]
  H args[1]
  Z args[2]
// MARGIN PADDING BORDER
_isChildSel(arg)
  if typeof(arg) != 'string'
    return
  if arg == 'F' || arg == '!F' || arg == 'L' || arg == '!L'
    return true
  return
P(args...)
  padding R(args[0]) R(args[1]) R(args[2]) R(args[3])
P-T(args...)
  sel = _isChildSel(args[1]) ? sel = args[1] : ''
  if sel == ''
    padding-top R(args[0])
  else if sel == 'F'
    &:first-child
      padding-top R(args[0])
  else if sel == '!F'
    padding-top R(args[0])
    &:first-child
      padding-top 0
  else if sel == 'L'
    &:last-child
      padding-top R(args[0])
  else if sel == '!L'
    padding-top R(args[0])
    &:last-child
      padding-top 0
P-R(args...)
  sel = _isChildSel(args[1]) ? sel = args[1] : ''
  if sel == ''
    padding-right R(args[0])
  else if sel == 'F'
    &:first-child
      padding-right R(args[0])
  else if sel == '!F'
    padding-right R(args[0])
    &:first-child
      padding-right 0
  else if sel == 'L'
    &:last-child
      padding-right R(args[0])
  else if sel == '!L'
    padding-right R(args[0])
    &:last-child
      padding-right 0
P-B(args...)
  sel = _isChildSel(args[1]) ? sel = args[1] : ''
  if sel == ''
    padding-bottom R(args[0])
  else if sel == 'F'
    &:first-child
      padding-bottom R(args[0])
  else if sel == '!F'
    padding-bottom R(args[0])
    &:first-child
      padding-bottom 0
  else if sel == 'L'
    &:last-child
      padding-bottom R(args[0])
  else if sel == '!L'
    padding-bottom R(args[0])
    &:last-child
      padding-bottom 0
BOR(args...)
  border args[0] solid args[1]
BOR-T(args...)
  border-top args[0] solid args[1]
BOR-R(args...)
  border-right args[0] solid args[1]
BOR-B(args...)
  border-bottom args[0] solid args[1]
BOR-L(args...)
  border-left args[0] solid args[1]
P-L(args...)
  sel = _isChildSel(args[1]) ? sel = args[1] : ''
  if sel == ''
    padding-left R(args[0])
  else if sel == 'F'
    &:first-child
      padding-left R(args[0])
  else if sel == '!F'
    padding-left R(args[0])
    &:first-child
      padding-left 0
  else if sel == 'L'
    &:last-child
      padding-left R(args[0])
  else if sel == '!L'
    padding-left R(args[0])
    &:last-child
      padding-left 0
M(args...)
  margin R(args[0]) R(args[1]) R(args[2]) R(args[3])
M-T(args...)
  sel = _isChildSel(args[1]) ? sel = args[1] : ''
  if sel == ''
    margin-top R(args[0])
  else if sel == 'F'
    &:first-child
      margin-top R(args[0])
  else if sel == '!F'
    margin-top R(args[0])
    &:first-child
      margin-top 0
  else if sel == 'L'
    &:last-child
      margin-top R(args[0])
  else if sel == '!L'
    margin-top R(args[0])
    &:last-child
      margin-top 0
M-R(args...)
  sel = _isChildSel(args[1]) ? sel = args[1] : ''
  if sel == ''
    margin-right R(args[0])
  else if sel == 'F'
    &:first-child
      margin-right R(args[0])
  else if sel == '!F'
    margin-right R(args[0])
    &:first-child
      margin-right 0
  else if sel == 'L'
    &:last-child
      margin-right R(args[0])
  else if sel == '!L'
    margin-right R(args[0])
    &:last-child
      margin-right 0
M-B(args...)
  sel = _isChildSel(args[1]) ? sel = args[1] : ''
  if sel == ''
    margin-bottom R(args[0])
  else if sel == 'F'
    &:first-child
      margin-bottom R(args[0])
  else if sel == '!F'
    margin-bottom R(args[0])
    &:first-child
      margin-bottom 0
  else if sel == 'L'
    &:last-child
      margin-bottom R(args[0])
  else if sel == '!L'
    margin-bottom R(args[0])
    &:last-child
      margin-bottom 0
M-L(args...)
  sel = _isChildSel(args[1]) ? sel = args[1] : ''
  if sel == ''
    margin-left R(args[0])
  else if sel == 'F'
    &:first-child
      margin-left R(args[0])
  else if sel == '!F'
    margin-left R(args[0])
    &:first-child
      margin-left 0
  else if sel == 'L'
    &:last-child
      margin-left R(args[0])
  else if sel == '!L'
    margin-left R(args[0])
    &:last-child
      margin-left 0
// COLOR
C(args...)
  if args[0]
    color args[0]
  if args[1]
    background-color args[1]
    & > svg path, & > path
      fill args[1]
  if args[2]
    border-color args[2]
    & > svg path, & > path
      stroke args[1]
